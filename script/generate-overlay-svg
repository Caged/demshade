#!/usr/bin/env node

const gdal = require('gdal')
const d3 = require('d3')
const jsdom = require('jsdom')
const commander = require('commander')
const featureCollection = require('@turf/helpers').featureCollection
const point = require('@turf/helpers').point
const envelope = require('@turf/envelope')
const intersection = require('@turf/intersect')
const fs = require('fs')

commander
  .version(require("../package.json").version)
  .option('-i, --in <img>', 'tif image to extract GIS info from')
  .option('-o, --out <svg>', 'svg to write')
  .option('--states <staes>', 'geojson states data')
  .parse(process.argv)

// Takes a proj4 string and converts it into a javascript object
// str - proj4 string
function projToObj(str) {
  const out = {}
  str.split(/\s?\+/).forEach((e) => {
    var d = e.split('=')
    if(d[0]) out[d[0]] = d[1] ? d[1].trim() : null
  })

  return out
}

// Get the bounds of the datasources as a polygon projected to WGS84
// ds - The tif data sources
//
// Returns a Polygon
function wgs84Envelope(ds) {
  const [ulx, xres, xskew, uly, yskew, yres] = ds.geoTransform,
        lrx = ulx + (ds.rasterSize.x * xres),
        lry = uly + (ds.rasterSize.y * yres)

  const wgs84 = gdal.SpatialReference.fromEPSG(4326),
        transformer = new gdal.CoordinateTransformation(ds.srs, wgs84),
        topL = transformer.transformPoint(ulx, uly),
        botR = transformer.transformPoint(lrx, lry),
        pointTL = point([topL.x, topL.y]),
        pointBR = point([botR.x, botR.y])

  return envelope(featureCollection([pointTL, pointBR]))
}

const ds = gdal.open(commander.in),
      info = projToObj(ds.srs.toProj4()),
      width = ds.rasterSize.x,
      height = ds.rasterSize.y,
      document = jsdom.jsdom(),
      boundingPoly = wgs84Envelope(ds)

const out = d3.select(document.body).append('svg')
  .attr('xmlns', 'http://www.w3.org/2000/svg')
  .attr('width', width)
  .attr('height', height)

const projection = d3.geoConicConformal()
  .parallels([+info.lat_1, +info.lat_2])
  .rotate([Math.abs(+info.lon_0), 0])

const path = d3.geoPath()
  .projection(projection)

const states = JSON.parse(fs.readFileSync(commander.states, 'utf-8')),
      intersections = []

states.features.forEach(s => {
  const theIntersect = intersection(s.geometry, boundingPoly.geometry)
  if(theIntersect) intersections.push(theIntersect)
})

const features = featureCollection(intersections)
projection.fitSize([width, height], features)

out.selectAll('.state')
  .data(features.features)
.enter().append('path')
  .attr('d', path)

// ds.bands.forEach(function(l) {
//   console.log(ds);
// })
// TODO: Read some GeoJSON data and render the state svg
// - State outline(s)
// - Water
// - Counties
// - Populated places
// - Roads
// - Use OpenStreetMap data?
fs.writeFileSync(commander.out, d3.select(document.body).node().innerHTML)
