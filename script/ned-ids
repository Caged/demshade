#!/usr/bin/env python

import sys
import argparse
import json

import fiona
from shapely.geometry import shape, Polygon

parser = argparse.ArgumentParser(description='Get a list of NED ids for the given state')
parser.add_argument('--state', help='state name', required=True)
parser.add_argument('--buffer', help='buffer area around state', default=0)
args = parser.parse_args()

ned_ids = []
debug_file = "data/shp/" + args.state + "-debug.shp"

with fiona.open('data/shp/states.shp') as src:
    state = list(filter(lambda f: f['properties']['NAME'].lower() == args.state, src))
    if len(state) > 1 or len(state) == 0:
        print("Error. Found %s states" % len(state))
    else:
        state = state[0]

    state_geom = shape(state['geometry'])

    xmin, ymin, xmax, ymax = state_geom.buffer(args.buffer).bounds
    buffered_box = Polygon([
            (xmin, ymin),
            (xmin, ymax),
            (xmax, ymax),
            (xmax, ymin)])

    with open("data/png/%s/%s-bounds.json" % (args.state, args.state), 'w') as debugf:
        json.dump({
            'state': args.state,
            'buffered': buffered_box.bounds,
            'bounds': state_geom.bounds
            }, debugf, indent=2)

    with fiona.open('data/shp/arc_reference.shp') as ref:
        with fiona.open(debug_file, "w", "ESRI Shapefile", schema=ref.schema, crs=ref.crs) as debug:
            for layer in ref:
                if buffered_box.intersects(shape(layer['geometry'])):
                    ned_ids.append(layer['properties']['FILE_ID'])
                    debug.write(layer)

print(str.join(' ', ned_ids))
